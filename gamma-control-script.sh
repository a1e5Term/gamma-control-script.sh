#!/bin/bash

S=0.7

COF='\e[?25l' #Cursor Off                                            |
CON='\e[?25h' #Cursor On   

cursor(){
    case $1 in
         on) stty  echo; printf "$CON";;
        off) stty -echo; printf "$COF";;
        #Отключаем отображение ввода
    esac
}

up_f ()
{
	S=$(echo "$S + 0.1" | bc)
	#echo 0$S
	xgamma -gamma $S
	main
}

down_f ()
{
	S=$(echo "$S - 0.1" | bc)
	#echo 0$S
	xgamma -gamma $S
	main
}

read_input(){
    read -rsN1 _input_
		#-r: этот флаг отключает интерпретацию обратных слэшей (\). Это означает, что если пользователь введет символы, содержащие обратные слэши, они будут считаться обычными символами, а не управляющими.

		#-s: этот флаг делает ввод "тихим", то есть вводимые символы не будут отображаться на экране. Это полезно, например, при вводе паролей.

		#-N1: этот флаг указывает, что нужно прочитать ровно один символ. N обозначает количество символов, которые нужно прочитать, а 1 — это конкретное количество. 

    case ${_input_,,} in
			#${_input_,,}: Это синтаксис параметрической подстановки, который используется для преобразования строки. В данном случае ,, означает, что содержимое переменной _input_ будет преобразовано в нижний регистр. 
			
            # One symbol keys support
                ' '*) _input_=space;;
              $'\t'*) _input_=tab  ;;
              $'\n'*) _input_=enter;;
            # escape sequences additional check
            $'\u1b'*) read -rsN4 -t 0.001 _input_
				#$'\u1b': Это специальный синтаксис в Bash, который позволяет использовать символы Unicode. В данном случае \u1b представляет собой символ с кодом Unicode 1B, который соответствует управляющему символу "ESC" (Escape). Таким образом, $'\u1b' будет интерпретироваться как символ Escape.

				#*): Это часть, которая может быть использована в конструкции case. Она означает, что если входная строка не соответствует ни одному из других шаблонов, то будет выполнен этот блок кода. В данном контексте это может означать, что код выполняется, если входные данные начинаются с символа Escape.

				#read -rsN4 -t 0.001 _input_: Это команда read, которая используется для чтения ввода от пользователя. Вот что означают флаги:
				#-r: Не интерпретировать обратные слэши как escape-символы.
				#-s: Скрыть ввод (например, для ввода пароля).
				#-N4: Чтение ровно 4 символов.
				#-t 0.001: Установить тайм-аут на 0.001 секунды. Если за это время не будет введено ничего, команда завершится.

				#Таким образом, вся строка кода выполняет следующее: если входная строка начинается с символа Escape, то программа будет ждать ввода 4 символов от пользователя, при этом ввод будет скрыт, и если пользователь не введет ничего за 0.001 секунды, команда завершится.

				#Это может быть полезно в сценариях, где требуется быстрое реагирование на ввод пользователя, например, в интерактивных скриптах или играх.
                      case ${_input_,,} in
                                   # arrows, pgUp/Down and escape support
                                   *a*) _input_=up    ;;
                                   *b*) _input_=down  ;;
                                   *d*) _input_=left  ;;
                                   *c*) _input_=right ;;
                                   *5*) _input_=pgup  ;;
                                   *6*) _input_=pgdown;;
                                    '') _input_=escape;;
                      esac;;
                   # the rest, return 1 symbol in lowercase
                   *) _input_=${_input_,,}
                      _input_=${_input_:0:1};;
    esac
}


main ()
{
	clear
	xgamma
	echo 1 - увеличить
	echo 2 - уменьшить
	#echo S=0.$S
	echo S=$S
  
	read_input
	case $_input_ in
		1 | w | d | up | pgup)
			up_f
			;;
			
		2 | s | a | down | pgdown)
			down_f
			;;
		escape ) 
			return
			;;

		*)
			echo вводите up или down
			main
			;;
	esac

}

cursor off
main
